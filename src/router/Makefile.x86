#
# Broadcom Linux Router Makefile
#
# Copyright 2001-2003, Broadcom Corporation
# All Rights Reserved.
#
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
# $Id: Makefile,v 1.2 2005/09/26 11:06:58 seg Exp $
#

include .config
ifneq ($(wildcard ../cy_conf.mak),)
  include ../cy_conf.mak
endif

#
# Paths
#
OPENSER_MODULES := sl tm rr maxfwd usrloc registrar dbtext textops exec auth auth_db nathelper
OPENSER_MODULE_FILES := $(foreach module,$(OPENSER_MODULES),openser/modules/$(module)/$(module).so)
OPENSSL_NO_CIPHERS:= no-idea no-md2 no-mdc2 no-rc5 no-sha0 no-rmd160 no-aes192
OPENSSL_OPTIONS:= shared no-ec no-err no-fips no-hw no-krb5 no-threads zlib-dynamic no-engines

# Source bases

export PLATFORM LINUXDIR LIBDIR USRLIBDIR
export TOP := $(shell pwd)
export SRCBASE := $(shell (cd $(TOP)/.. && pwd -P))


# Set the HAL directory if you have the HAL sources

# Set the Atheros Rate Control directory if you have the proprietary rate control
export ATH_RATE=ath_rate/sample

#
# Cross-compile environment variables
#

# Build platform
export BUILD := i386-pc-linux-gnu
export HOSTCC := gcc

# uClibc wrapper
export ARCH:=$(PLATFORM)
ifeq ($(CONFIG_UCLIBC),y)
export PLATFORM := $(PLATFORM)-uclibc
endif

#export LINUXDIR := $(SRCBASE)/linux/linux.v24
ifeq ($(ARCH),mips)
export LINUXDIR := $(SRCBASE)/linux/brcm63xx/linux-2.6.17
endif
ifeq ($(ARCH),i386)
export LINUXDIR := $(SRCBASE)/linux/x86/linux-2.6.23
endif
ifeq ($(ARCH),armeb)
export LINUXDIR := $(SRCBASE)/linux/xscale/linux-2.6.17
endif
ifeq ($(ARCH),mipsel)
export LINUXDIR := $(SRCBASE)/kernel/rb500/linux-2.6.17-rc5
endif

#export KERNELRELEASE = $(shell cat $(LINUXDIR)/.kernelrelease 2> /dev/null)
export KRELEASE = $(shell cat $(LINUXDIR)/include/config/kernel.release 2> /dev/null)

#ifeq ($(PLATFORM),mipsel)
#export CROSS_COMPILE := mipsel-linux-
#export CONFIGURE := ./configure mipsel-linux --build=$(BUILD)
#export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../mipsel-linux && pwd -P)
#endif

#ifeq ($(PLATFORM),mipsel-uclibc)
export CROSS_COMPILE := $(ARCH)-linux-uclibc-
export CONFIGURE := ./configure $(ARCH)-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/.. && pwd -P)
#endif

#ifeq ($(CONFIG_BCMWPA2),y)
#export CFLAGS += -DBCMWPA2 
#endif

export BASEOPT:=-Os
#export ARCH:= mipsel

ifeq ($(ARCH),mipsel)
export COPTS:=$(BASEOPT) -pipe -mips32 -mtune=mips32 -funit-at-a-time 
endif
ifeq ($(ARCH),armeb)
export COPTS:=$(BASEOPT) -pipe -mtune=xscale -march=armv5te -Wa,-mcpu=xscale -mno-thumb-interwork -mno-thumb -funit-at-a-time 
endif
ifeq ($(ARCH),mips)
export COPTS:=$(BASEOPT) -pipe -mips32 -mtune=mips32 -funit-at-a-time 
endif
ifeq ($(ARCH),i386)
export COPTS:=$(BASEOPT) -pipe -march=i486 -mtune=i486 -funit-at-a-time 
endif

export CC := $(CROSS_COMPILE)gcc
export CXX := $(CROSS_COMPILE)g++
export AR := $(CROSS_COMPILE)ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)nm
export RANLIB := $(CROSS_COMPILE)ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size

export CFLAGS := $(COPTS)

#
# Install and target directories
#

export PLATFORMDIR := $(TOP)/$(PLATFORM)
export INSTALLDIR := $(PLATFORMDIR)/install
export TARGETDIR := $(PLATFORMDIR)/target

ifeq ($(PLATFORM),mipsel)
obj-y += libcrypto
endif
#
# Configuration
#
CONFIG_IPTABLES=y
include rules/configs.mk

obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)
obj-distclean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-distclean)

#
# Basic rules
#


all: build_date clean_target $(obj-y) $(LINUXDIR)/.config kernel

build_date:
	echo "#define BUILD_DATE \"$(shell date +%D)\"" > ../../opt/build.h 


kernel:
        # Also build kernel
	# Also build kernel
ifeq ($(CONFIG_ISOFS),y)
	cp $(LINUXDIR)/.config_isofs $(LINUXDIR)/.config
endif
ifeq ($(CONFIG_EOP_TUNNEL),y)
	echo CONFIG_NET_ETHERIP=m >> $(LINUXDIR)/.config
else
	echo "# CONFIG_NET_ETHERIP is not set" >> $(LINUXDIR)/.config
endif
	make -C $(LINUXDIR) oldconfig
	if ! grep -q "CONFIG_EMBEDDED_RAMDISK=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -j 4 -C $(LINUXDIR) bzImage CROSS_COMPILE=$(ARCH)-linux-uclibc- ; \
	fi
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -j 4 -C $(LINUXDIR) modules CROSS_COMPILE=$(ARCH)-linux-uclibc- ; \
	fi
	#armeb-linux-uclibc-strip --remove-section=.note --remove-section=.comment $(LINUXDIR)/vmlinux
	#armeb-linux-uclibc-objcopy -O binary $(LINUXDIR)/vmlinux vmlinux.bin 
	#cmplzma -k -3 $(LINUXDIR)/vmlinux vmlinux.bin $(PLATFORMDIR)/vmlinux.lz
	
#	cat $(LINUXDIR)/vmlinus | lzma e -si -so -eos -lc1 -lp2 -pb2 > lzma-loader/rb500/vmlinux.lzma
#	make -C lzma-loader/rb500 clean
#	make -C lzma-loader/rb500 
#	cp lzma-loader/rb500/lzma.elf $(ARCH)-uclibc/vmlinux

	
realclean: $(obj-clean)
	rm -f .config.old .config.cmd
	#umount $(TARGETDIR)
	rm -rf $(INSTALLDIR)
	rm -rf $(TARGETDIR)
	rm -f $(TARGETDIR)/*
	-rm -f $(ARCH)-uclibc/*

	
clean: rc-clean httpd-clean services-clean shared-clean libutils-clean madwifi-clean madwifi_mimo-clean busybox-clean	
	rm -f .config.old .config.cmd
	#umount $(TARGETDIR)
	rm -rf $(INSTALLDIR)
	rm -rf $(TARGETDIR)
	rm -f $(TARGETDIR)/*
	-rm -f $(ARCH)-uclibc/*

clean_target:
	#umount $(TARGETDIR)
	rm -rf $(TARGETDIR)
	rm -rf $(INSTALLDIR)
#	rm -f $(PLATFORMDIR)/linux.trx $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.squashfs

distclean mrproper: $(obj-distclean) clean_target
	rm -rf $(INSTALLDIR)
	$(MAKE) -C $(LINUXDIR) distclean
	$(MAKE) -C $(LINUXDIR)/arch/mips/bcm947xx/compressed clean
	#rm -f $(PLATFORMDIR)/zImage $(PLATFORMDIR)/linux.bin
	$(MAKE) -C config clean
	rm -f .config $(LINUXDIR)/.config
	rm -f .config.old .config.cmd

optimize-lib:
#	../../tools/optimize_lib.sh netconf/ libnetconf.so libnetconf.a libnetconf_min.so $(TARGETDIR) $(TARGETDIR)/usr/lib/libnetconf.so
#	../../tools/optimize_lib.sh shared/ libshared.so libshared.a libshared_min.so $(TARGETDIR) $(TARGETDIR)/usr/lib/libshared.so
#	../../tools/optimize_lib.sh lib/ libm.so libm.a libm_min.so $(TARGETDIR) $(TARGETDIR)/lib/libm.so.0
	../../tools/optimize_lib.sh lib.i386/ libpthread.so libpthread.a libphread_min.so $(TARGETDIR) $(TARGETDIR)/lib/libpthread.so.0
#	../../tools/optimize_lib.sh services/ services.so services.a services_min.so $(TARGETDIR) $(TARGETDIR)/usr/lib/services.so
#  ../../tools/optimize_lib.sh iptables/ libiptables.so libiptables.a libiptables_min.so $(TARGETDIR) $(TARGETDIR)/usr/lib/libiptables.so


install package: clean_target $(filter-out lib.$(ARCH)-install,$(obj-install)) $(LINUXDIR)/.config
        # Install binaries into target directory
	# Install binaries into target directory
#	make -C viarhine clean
#	make -C viarhine	
	#umount -f $(TARGETDIR)
	#dd if=/dev/zero of=mipsel-uclibc/root.fs bs=1024 count=27392
	#mke2fs -F -b 1024 mipsel-uclibc/root.fs
	#mkfs.ext3 -F -b 1024 mipsel-uclibc/root.fs
	install -d $(TARGETDIR)
	#mount mipsel-uclibc/root.fs -o loop=/dev/loop1 $(TARGETDIR)
#	$(ARCH)-linux-strip $(LINUXDIR)/vmlinux -o $(ARCH)-uclibc/vmlinux
#	cp $(LINUXDIR)/vmlinus mipsel-uclibc/vmlinux
#	gunzip -c base.img.gz>image.img
#	../tools/write $(ARCH)-uclibc/vmlinux image.img 16384
	#dd if=$(LINUXDIR)/vmlinux of=/dev/loop0 bs=512 seek=32
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) ; do \
	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done
	mkdir -p $(ARCH)-uclibc/target/etc/config
	mkdir -p $(ARCH)-uclibc/target/etc/kaid
	mkdir -p $(ARCH)-uclibc/target/etc/langpack
	cp ./opt/bin/ipkg $(ARCH)-uclibc/target/bin
	cd  $(ARCH)-uclibc/target/lib
#	ln -s libgcc_s.so.1 libgcc_s.so
#	cd ../../../../../opt
	cp ./opt/etc/preinit $(ARCH)-uclibc/target/etc
	cp ./opt/etc/postinit $(ARCH)-uclibc/target/etc
	cp ./opt/etc/ipkg.conf $(ARCH)-uclibc/target/etc
	cp ./opt/etc/config/* $(ARCH)-uclibc/target/etc/config
	cp ./opt/usr/lib/smb.conf $(ARCH)-uclibc/target/usr/lib
	ln -sf ../tmp/smbshare $(ARCH)-uclibc/target/www/smb

	# optimize the crypto library by removing unneeded symbols
	#[ ! -d libcrypto ] || $(MAKE) -C libcrypto optimize
	#[ ! -d libcrypto ] || $(MAKE) -C libcrypto optimize
	# Install (and possibly optimize) C library
	$(MAKE) -f Makefile.x86 lib.$(ARCH)-install
	# optimize the others library by removing unneeded symbols
	$(MAKE) -f Makefile.x86 optimize-lib
	# Install modules into filesystem
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR) ; \
	fi
ifeq ($(CONFIG_MADWIFI),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KRELEASE)/kernel/drivers/net/wl
endif
#	mkdir -p $(TARGETDIR)/lib/modules/2.4.32/kernel/drivers/net/ctmisc
#	cp ../wl/ctmisc/ctmisc.o $(TARGETDIR)/lib/modules/2.4.32/kernel/drivers/net/ctmisc
	##not used yet
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#cp ./switch/switch-core.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
#	cp ./viarhine/via-rhine.o $(TARGETDIR)/lib/modules/2.4.32/kernel/drivers/net

	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#cp ./switch/switch-adm.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	cp lib.$(ARCH)/libgcc_s.so.1 $(TARGETDIR)/lib
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#cp ./switch/switch-robo.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc1/kernel/drivers/net/et
	#cp ../et/linux/et.o $(TARGETDIR)/lib/modules/2.4.32-rc1/kernel/drivers/net/et
	
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/et.4702
	#cp ../et.4702/linux/4702et.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/et.4702
	# robo switch
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/robo
	#cp ../robo/linux/robo.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/robo
	
	find $(TARGETDIR) -name "wl_*.o"  | xargs rm -rf
	# quick n dirty - stuff Nikki's module where it belongs
	#mkdir $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/adm6996
#	if [ "$(CONFIG_MMC)" = "y" ] ; then \
#	mkdir $(TARGETDIR)/lib/modules/2.4.32/kernel/fs/mmc ; \
#	cp mmc/mmc.o $(TARGETDIR)/lib/modules/2.4.32/kernel/fs/mmc ; \
#	fi ; 
#ifeq ($(CONFIG_MSSID),y)
#	cp adm6996.v24/adm6996.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/adm6996/adm6996.o
#else	
#	cp adm6996/adm6996.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/adm6996/adm6996.o
#endif

	rm -f $(TARGETDIR)/lib/modules/$(KRELEASE)/build
	rm -f $(TARGETDIR)/lib/modules/$(KRELEASE)/source
	
	
	
        # Prepare filesystem
	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
        # Make sure mksquashfs-2.0 is used
#	$(MAKE) -C $(LINUXDIR)/scripts/squashfs mksquashfs
	cd $(TARGETDIR)  &&  find . -iname "CVS" | xargs rm -rf
	cd $(TARGETDIR)  &&  find . -iname ".svn" | xargs rm -rf
#	cp viarhine/pci-scan.o $(TARGETDIR)/lib/modules/2.4.32/kernel/drivers/net/pci-scan.o
#	cp -f test/* $(TARGETDIR)/lib/modules/2.4.33-pre1/kernel/drivers/net
	
#	mknod $(TARGETDIR)/dev/cfa b 13 0
#	mknod $(TARGETDIR)/dev/cfa1 b 13 1
#	mknod $(TARGETDIR)/dev/cfa2 b 13 2
#	mknod $(TARGETDIR)/dev/cfa3 b 13 3
#	mknod $(TARGETDIR)/dev/cfa4 b 13 4
#	umount $(TARGETDIR)
#find $(TARGETDIR)/lib/modules -name *.ko -exec mipsel-linux-strip --strip-unneeded --remove-section=.comment {} +		
	#e2fsck -y -f $(ARCH)-uclibc/root.fs
	./busybox/examples/depmod.pl -F $(LINUXDIR)/System.map -b $(ARCH)-uclibc/target/lib/modules
	#cd $(TARGETDIR)
	tar --directory=$(TARGETDIR) --remove-files -cvvjf $(TARGETDIR)/etc/local.tar.bz2 usr/local
	rm -rf $(TARGETDIR)/usr/local
	mkdir $(TARGETDIR)/usr/local
ifeq ($(CONFIG_KAID),y)
	cp kaid/kaid $(TARGETDIR)/usr/sbin
endif
	mv $(TARGETDIR)/usr/lib/services.so $(TARGETDIR)/lib
	./strip_libs.sh $(ARCH)

	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(ARCH)-uclibc/target $(ARCH)-uclibc/root.fs -noappend -le
#	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(ARCH)-uclibc/target $(ARCH)-uclibc/root.fs -noappend -root-owned -le -b 262144 -nopad
	mkfs.jffs2 --pad --big-endian --squash -e 0x20000 -o $(ARCH)-uclibc/dd-wrt.jffs2 -d $(ARCH)-uclibc/target
	cd grub && ./configure --host=i386-linux --target=i386-linux LDFLAGS="-static" CFLAGS="-O2"
	make -C grub install DESTDIR=$(INSTALLDIR)/grub	
	mkdir -p $(ARCH)-uclibc/root.grub/boot/grub
	cp \
		$(INSTALLDIR)/grub/usr/local/lib/grub/i386-pc/stage1 \
		$(INSTALLDIR)/grub/usr/local/lib/grub/i386-pc/stage2 \
		$(INSTALLDIR)/grub/usr/local/lib/grub/i386-pc/e2fs_stage1_5 \
		$(ARCH)-uclibc/root.grub/boot/grub/
	cp grub/menu_serial.lst $(ARCH)-uclibc/root.grub/boot/grub/menu.lst
	cp $(LINUXDIR)/arch/i386/boot/bzImage $(ARCH)-uclibc/root.grub/boot/vmlinuz
	PATH="$(INSTALLDIR)/grub/usr/local/sbin:$(INSTALLDIR)/grub/usr/local/bin:$(PATH)" ./gen_image.sh $(ARCH)-uclibc/dd-wrt_serial.image 3 $(ARCH)-uclibc/root.grub 9 $(ARCH)-uclibc/root.fs 16
	cp grub/menu_vga.lst $(ARCH)-uclibc/root.grub/boot/grub/menu.lst
	PATH="$(INSTALLDIR)/grub/usr/local/sbin:$(INSTALLDIR)/grub/usr/local/bin:$(PATH)" ./gen_image.sh $(ARCH)-uclibc/dd-wrt_vga.image 3 $(ARCH)-uclibc/root.grub 9 $(ARCH)-uclibc/root.fs 16
	./tools/wrap $(ARCH)-uclibc/dd-wrt_vga.image $(ARCH)-uclibc/dd-wrt-vga-webupgrade.bin
	./tools/wrap $(ARCH)-uclibc/dd-wrt_serial.image $(ARCH)-uclibc/dd-wrt-serial-webupgrade.bin

#	mkdir -p $(TARGETDIR)/boot/grub
#	cp $(INSTALLDIR)/grub/usr/local/lib/grub/i386-pc/stage2_eltorito $(TARGETDIR)/boot/grub
#	mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot  -boot-load-size 4 -boot-info-table -o grub.iso $(TARGETDIR)
	
#endif
#
# Configuration rules
#
include rules/all.mk

%:
	[ ! -d $* ] || $(MAKE) -C $* 

%-distclean:
	[ ! -d $* ] || $(MAKE) -C $* clean

%-clean:
	[ ! -d $* ] || $(MAKE) -C $* clean

%-install:
	[ ! -d $* ] || $(MAKE) -C $* install INSTALLDIR=$(INSTALLDIR)/$*

$(obj-y) $(obj-n) $(obj-clean) $(obj-install): dummy

.PHONY: all clean distclean mrproper install package
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy fixkc libnet libpcap




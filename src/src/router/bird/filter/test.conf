/*
 *	This is an example configuration file.
 *	FIXME: add all examples from docs here.
 */

# Yet another comment

router id 62.168.0.1;

define xyzzy = (120+10);

function callme(int arg1; int arg2)
int local1;
int local2;
int i;
{
	printn "Function callme called arguments ", arg1, " and ", arg2, ":" ;
	i = arg2;

	case arg1 {
	2: print "dva"; print "jeste jednou dva";
	3 .. 5: print "tri az pet";
	else: print "neco jineho";
	}	
}

function fifteen()
{
	print "fifteen called";
	return 15;
}

function paths()
bgpmask p;
bgppath p2;
clist l;
{
	p = / 4 3 2 1 /;
	print "Testing path masks: ", p;
	p2 = prepend( + empty +, 1 );
	p2 = prepend( p2, 2 );
	p2 = prepend( p2, 3 );
	p2 = prepend( p2, 4 );
	print "Testing paths: ", p2;
	print "Should be true: ", p2 ~ p;
	print "4 = ", p2.len;
	p2 = prepend( p2, 5 );
	print "Should be false: ", p2 ~ p;
	print "Should be true: ", p2 ~ / ? 4 3 2 1 /, p2, / ? 4 3 2 1 /;
	print "Should be true: ", p2 ~ / ? 4 3 ? 1 /, p2, / ? 4 3 ? 1 /;
	print "5 = ", p2.len;

	l = - empty -;
	l = add( l, (1,2) );
	l = add( l, (2,3) );
	print "Community list (1,2) (2,3) ", l;
	print "Should be true: ", (2,3) ~ l;
	l = delete( l, (2,3) );
	print "Community list (1,2) ", l;
	print "Should be false: ", (2,3) ~ l;
}

function bla()
{
	print "fifteen called";
	return 15;
}

define four=4;
define onetwo=1.2.3.4;

function __test1()
{
        if source ~ [ RTS_BGP, RTS_STATIC ] then {                     
#                       ospf_metric1 = 65535;                                                                     
#                       ospf_metric2 = 1000;                                            
                        ospf_tag = 0x12345678;                              
                        accept;                                             
        }                                                                                                                                                                                                                reject;                                                                                                                                                                                          
}

function __test2()
{
        if source ~ [ RTS_BGP, RTS_STATIC ] then {                     
#                       ospf_metric1 = 65535;                                                                     
#                       ospf_metric2 = 1000;                                            
                        ospf_tag = 0x12345678;                              
                        accept;                                             
                }                                                                                                                                                                                                                reject;                                                                                                                                                                                          
}

function __startup() 
int i;
prefix px;
ip p;
{ 
	print "Testing filter language:";
	i = four; 
	i = 12*100 + 60/2 + i; 
	i = ( i + 0 );
	print "  arithmetics: 1234 = ", i;
	printn "  if statements ";
	print "what happens here?";
	printn ".";
	if (i = 4) then { print "*** FAIL: if 0"; quitbird; } else printn ".";
#	if !(i = 3) then { print "*** FAIL: if 0"; quitbird; } else printn ".";
	if 1234 = i then printn "."; else { print "*** FAIL: if 1 else"; }
#	if 1 <= 1 then printn "."; else { print "*** FAIL: test 3"; }
	if 1234 < 1234 then { print "*** FAIL: test 4"; quitbird; } else print "ok";
	print "  must be true: ", 1.2.0.0/16 ~ [ 1.0.0.0/8{ 15 , 17 } ];
	print "  data types; must be true: ", 1.2.3.4 = 1.2.3.4, ",", 1 ~ [1,2,3], ",", 5 ~ [1..20], ",", 2 ~ [ 1, 2, 3 ], ",", 5 ~ [ 4 .. 7 ], ",", 1.2.3.4 ~ [ 1.2.3.3..1.2.3.5 ], ",", 1.2.3.4 ~ 1.0.0.0/8, ",", 1.0.0.0/8 ~ 1.0.0.0/8, ",", 1.0.0.0/8 ~ [ 1.0.0.0/8+ ];
	print "  must be true: ", true && true, ",", true || false;

#	print "  must be true: ", defined(1), ",", defined(1.2.3.4), ",", 1 != 2, ",", 1 <= 2;
	print "  data types: must be false: ", 1 ~ [ 2, 3, 4 ], ",", 5 ~ [ 2, 3, 4, 7..11 ], ",", 1.2.3.4 ~ [ 1.2.3.3, 1.2.3.5 ], ",", (1,2) > (2,2), ",", (1,1) > (1,1), ",", 1.0.0.0/8 ~ [ 1.0.0.0/8- ], ",", 1.2.0.0/17 ~ [ 1.0.0.0/8{ 15 , 16 } ], ",", true && false;

	px = 1.2.0.0/18;
	print "Testing prefixes: 1.2.0.0/18 = ", px;
	p = 127.1.2.3;
	print "Testing mask : 127.0.0.0 = ", p.mask(8);
	print "Testing pairs: (1,2) = ", (1,2);
	print "Testing enums: ", RTS_DUMMY, " ", RTS_STATIC;

	print "What will this do? ", [ 1, 2, 1, 1, 1, 3, 4, 1, 1, 1, 5 ];

	print "Testing functions...";
#	callme ( 1, 2 );
	callme ( 2, 2 );
	callme ( 2, 2 );
	callme ( 3, 2 );
	callme ( 4, 2 );
	callme ( 7, 2 );

	i = fifteen();
	print "Testing function calls: 15 = ", i;

	paths();

	print "1.2.3.4 = ", onetwo;

	print "done";
	quitbird;
#	print "*** FAIL: this is unreachable"; 
}

filter testf 
int j; 
{ 
	print "Heya, filtering route to ", net.ip, " prefixlen ", net.len, " source ", source;
	print "This route was from ", from;
	j = 7;
	j = 17;
	if rip_metric > 15 then {
 		reject "RIP Metric is more than infinity";
	}
	rip_metric = 14;
	unset(rip_metric);
		
	accept "ok I take that";
}

eval __startup();